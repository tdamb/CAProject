name: Build, Push and Deploy Docker images to ECR and ECS

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  pull_request:
    branches:
      - main # Trigger on PRs to the main branch

permissions:
  contents: read
  id-token: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set the Date-Time Tag
        run: echo "DATETIME=$(date '+prod-%Y-%m-%d-%H-%M')" >> $GITHUB_ENV

      - name: Determine Change Path
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          echo "Changed files: $CHANGED_FILES"
          if [[ "$CHANGED_FILES" =~ "frontend/" ]] || [[ "$CHANGED_FILES" =~ "backend/" ]]; then
            echo "CODE_CHANGED=true" >> $GITHUB_ENV
          else
            echo "CODE_CHANGED=false" >> $GITHUB_ENV
          fi

      - name: Fetch Latest Image Tags
        if: env.CODE_CHANGED == 'false'
        run: |
          FRONTEND_IMAGE_URI=$(aws ecr describe-images --repository-name ${{ secrets.ECR_REPOSITORY }} --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[?starts_with(@, `frontend-`)] | [0]' --output text)
          BACKEND_IMAGE_URI=$(aws ecr describe-images --repository-name ${{ secrets.ECR_REPOSITORY }} --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[?starts_with(@, `backend-`)] | [0]' --output text)
          echo "FRONTEND_IMAGE_URI=$FRONTEND_IMAGE_URI" >> $GITHUB_ENV
          echo "BACKEND_IMAGE_URI=$BACKEND_IMAGE_URI" >> $GITHUB_ENV

      - name: Build and push Frontend Docker image
        if: env.CODE_CHANGED == 'true'
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          FRONTEND_IMAGE_TAG="$ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:frontend-${{ env.DATETIME }}"
          docker build -t $FRONTEND_IMAGE_TAG ./frontend/create-react-app
          docker push $FRONTEND_IMAGE_TAG
          echo "FRONTEND_IMAGE_URI=$FRONTEND_IMAGE_TAG" >> $GITHUB_ENV

      - name: Build and push Backend Docker image
        if: env.CODE_CHANGED == 'true'
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          BACKEND_IMAGE_TAG="$ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:backend-${{ env.DATETIME }}"
          docker build -t $BACKEND_IMAGE_TAG ./backend
          docker push $BACKEND_IMAGE_TAG
          echo "BACKEND_IMAGE_URI=$BACKEND_IMAGE_TAG" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Initialize Terraform
        run: terraform init
        working-directory: ./infrastructure

      - name: Pre-Deployment Capacity Check
        run: |
          CURRENT_CAPACITY=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names "terraform-20240709181605878000000001" --query 'AutoScalingGroups[0].DesiredCapacity' --output text)
          if [[ "$CURRENT_CAPACITY" -lt 3 ]]; then
            echo "Scaling up the ASG"
            aws autoscaling set-desired-capacity --auto-scaling-group-name "terraform-20240709181605878000000001" --desired-capacity $(($CURRENT_CAPACITY + 1))
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Wait for EC2 Instances to be Ready
        run: |
          echo "Waiting for new EC2 instances to be fully operational..."
          while : ; do
            # Check if the instances are in a 'Healthy' state
            INSTANCE_STATUS=$(aws ec2 describe-instance-status --query 'InstanceStatuses[?InstanceState.Name==`running` && SystemStatus.Status==`ok` && InstanceStatus.Status==`ok`].InstanceId' --output text)
            if [[ -n "$INSTANCE_STATUS" ]]; then
              echo "Instances are ready."
              break
            else
              echo "Instances are not ready yet, waiting..."
              sleep 30
            fi
          done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Apply Terraform Configuration
        run: terraform apply -auto-approve
        working-directory: ./infrastructure
        env:
          TF_VAR_frontend_image_uri: ${{ env.FRONTEND_IMAGE_URI }}
          TF_VAR_backend_image_uri: ${{ env.BACKEND_IMAGE_URI }}

      - name: Post-Deployment Scaling Down
        run: |
          CURRENT_CAPACITY=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names "terraform-20240709181605878000000001" --query 'AutoScalingGroups[0].DesiredCapacity' --output text)
          if [[ "$CURRENT_CAPACITY" -gt 2 ]]; then
            echo "Scaling down the ASG"
            aws autoscaling set-desired-capacity --auto-scaling-group-name "terraform-20240709181605878000000001" --desired-capacity $(($CURRENT_CAPACITY - 1))
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
